/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      Poll: PollObject
      Answer: AnswerObject
      PollConnection: PollConnectionObject
      PageInfo: PageInfoObject
      PollEdge: PollEdgeObject
      AggregatePoll: AggregatePollObject
      AnswerConnection: AnswerConnectionObject
      AnswerEdge: AnswerEdgeObject
      AggregateAnswer: AggregateAnswerObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      PollSubscriptionPayload: PollSubscriptionPayloadObject
      PollPreviousValues: PollPreviousValuesObject
      AnswerSubscriptionPayload: AnswerSubscriptionPayloadObject
      AnswerPreviousValues: AnswerPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      Poll: PollFieldDetails
      Answer: AnswerFieldDetails
      PollConnection: PollConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      PollEdge: PollEdgeFieldDetails
      AggregatePoll: AggregatePollFieldDetails
      AnswerConnection: AnswerConnectionFieldDetails
      AnswerEdge: AnswerEdgeFieldDetails
      AggregateAnswer: AggregateAnswerFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      PollSubscriptionPayload: PollSubscriptionPayloadFieldDetails
      PollPreviousValues: PollPreviousValuesFieldDetails
      AnswerSubscriptionPayload: AnswerSubscriptionPayloadFieldDetails
      AnswerPreviousValues: AnswerPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      PollWhereUniqueInput: PollWhereUniqueInputInputObject
      AnswerWhereInput: AnswerWhereInputInputObject
      PollWhereInput: PollWhereInputInputObject
      AnswerWhereUniqueInput: AnswerWhereUniqueInputInputObject
      PollCreateInput: PollCreateInputInputObject
      AnswerCreateManyWithoutPollInput: AnswerCreateManyWithoutPollInputInputObject
      AnswerCreateWithoutPollInput: AnswerCreateWithoutPollInputInputObject
      PollUpdateInput: PollUpdateInputInputObject
      AnswerUpdateManyWithoutPollInput: AnswerUpdateManyWithoutPollInputInputObject
      AnswerUpdateWithWhereUniqueWithoutPollInput: AnswerUpdateWithWhereUniqueWithoutPollInputInputObject
      AnswerUpdateWithoutPollDataInput: AnswerUpdateWithoutPollDataInputInputObject
      AnswerUpsertWithWhereUniqueWithoutPollInput: AnswerUpsertWithWhereUniqueWithoutPollInputInputObject
      AnswerScalarWhereInput: AnswerScalarWhereInputInputObject
      AnswerUpdateManyWithWhereNestedInput: AnswerUpdateManyWithWhereNestedInputInputObject
      AnswerUpdateManyDataInput: AnswerUpdateManyDataInputInputObject
      PollUpdateManyMutationInput: PollUpdateManyMutationInputInputObject
      AnswerCreateInput: AnswerCreateInputInputObject
      PollCreateOneWithoutAnswersInput: PollCreateOneWithoutAnswersInputInputObject
      PollCreateWithoutAnswersInput: PollCreateWithoutAnswersInputInputObject
      AnswerUpdateInput: AnswerUpdateInputInputObject
      PollUpdateOneRequiredWithoutAnswersInput: PollUpdateOneRequiredWithoutAnswersInputInputObject
      PollUpdateWithoutAnswersDataInput: PollUpdateWithoutAnswersDataInputInputObject
      PollUpsertWithoutAnswersInput: PollUpsertWithoutAnswersInputInputObject
      AnswerUpdateManyMutationInput: AnswerUpdateManyMutationInputInputObject
      PollSubscriptionWhereInput: PollSubscriptionWhereInputInputObject
      AnswerSubscriptionWhereInput: AnswerSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    AnswerOrderByInput: AnswerOrderByInputValues,
    PollOrderByInput: PollOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'poll', args?: QueryPollArgs[] | false, alias?: string  } 
  | { name: 'polls', args?: QueryPollsArgs[] | false, alias?: string  } 
  | { name: 'pollsConnection', args?: QueryPollsConnectionArgs[] | false, alias?: string  } 
  | { name: 'answer', args?: QueryAnswerArgs[] | false, alias?: string  } 
  | { name: 'answers', args?: QueryAnswersArgs[] | false, alias?: string  } 
  | { name: 'answersConnection', args?: QueryAnswersConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'poll'
  | 'polls'
  | 'pollsConnection'
  | 'answer'
  | 'answers'
  | 'answersConnection'


type QueryPollArgs =
  | 'where'
type QueryPollsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPollsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryAnswerArgs =
  | 'where'
type QueryAnswersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryAnswersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  poll: {
    type: 'Poll'
    args: Record<QueryPollArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PollWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Poll | null> | prisma.Poll | null
  }
  polls: {
    type: 'Poll'
    args: Record<QueryPollsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PollWhereInput | null, orderBy?: prisma.PollOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Poll[]> | prisma.Poll[]
  }
  pollsConnection: {
    type: 'PollConnection'
    args: Record<QueryPollsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PollWhereInput | null, orderBy?: prisma.PollOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PollConnection> | prisma.PollConnection
  }
  answer: {
    type: 'Answer'
    args: Record<QueryAnswerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: AnswerWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Answer | null> | prisma.Answer | null
  }
  answers: {
    type: 'Answer'
    args: Record<QueryAnswersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: AnswerWhereInput | null, orderBy?: prisma.AnswerOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Answer[]> | prisma.Answer[]
  }
  answersConnection: {
    type: 'AnswerConnection'
    args: Record<QueryAnswersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: AnswerWhereInput | null, orderBy?: prisma.AnswerOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AnswerConnection> | prisma.AnswerConnection
  }
}
  

// Types for Poll

type PollObject =
  | PollFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'question', args?: [] | false, alias?: string  } 
  | { name: 'answers', args?: PollAnswersArgs[] | false, alias?: string  } 

type PollFields =
  | 'id'
  | 'question'
  | 'answers'


type PollAnswersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface PollFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  question: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  answers: {
    type: 'Answer'
    args: Record<PollAnswersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Poll">,
      args: { where?: AnswerWhereInput | null, orderBy?: prisma.AnswerOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Answer[]> | prisma.Answer[]
  }
}
  

// Types for Answer

type AnswerObject =
  | AnswerFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'answer', args?: [] | false, alias?: string  } 
  | { name: 'votes', args?: [] | false, alias?: string  } 
  | { name: 'poll', args?: [] | false, alias?: string  } 

type AnswerFields =
  | 'id'
  | 'answer'
  | 'votes'
  | 'poll'



  

export interface AnswerFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  answer: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  votes: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  poll: {
    type: 'Poll'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Answer">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Poll> | prisma.Poll
  }
}
  

// Types for PollConnection

type PollConnectionObject =
  | PollConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PollConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PollConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PollConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PollEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PollConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PollEdge[]> | prisma.PollEdge[]
  }
  aggregate: {
    type: 'AggregatePoll'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PollConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePoll> | prisma.AggregatePoll
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for PollEdge

type PollEdgeObject =
  | PollEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PollEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PollEdgeFieldDetails {
  node: {
    type: 'Poll'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PollEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Poll> | prisma.Poll
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePoll

type AggregatePollObject =
  | AggregatePollFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePollFields =
  | 'count'



  

export interface AggregatePollFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AnswerConnection

type AnswerConnectionObject =
  | AnswerConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type AnswerConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface AnswerConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AnswerConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'AnswerEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"AnswerConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AnswerEdge[]> | prisma.AnswerEdge[]
  }
  aggregate: {
    type: 'AggregateAnswer'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AnswerConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateAnswer> | prisma.AggregateAnswer
  }
}
  

// Types for AnswerEdge

type AnswerEdgeObject =
  | AnswerEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type AnswerEdgeFields =
  | 'node'
  | 'cursor'



  

export interface AnswerEdgeFieldDetails {
  node: {
    type: 'Answer'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AnswerEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Answer> | prisma.Answer
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateAnswer

type AggregateAnswerObject =
  | AggregateAnswerFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateAnswerFields =
  | 'count'



  

export interface AggregateAnswerFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createPoll', args?: MutationCreatePollArgs[] | false, alias?: string  } 
  | { name: 'updatePoll', args?: MutationUpdatePollArgs[] | false, alias?: string  } 
  | { name: 'updateManyPolls', args?: MutationUpdateManyPollsArgs[] | false, alias?: string  } 
  | { name: 'upsertPoll', args?: MutationUpsertPollArgs[] | false, alias?: string  } 
  | { name: 'deletePoll', args?: MutationDeletePollArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPolls', args?: MutationDeleteManyPollsArgs[] | false, alias?: string  } 
  | { name: 'createAnswer', args?: MutationCreateAnswerArgs[] | false, alias?: string  } 
  | { name: 'updateAnswer', args?: MutationUpdateAnswerArgs[] | false, alias?: string  } 
  | { name: 'updateManyAnswers', args?: MutationUpdateManyAnswersArgs[] | false, alias?: string  } 
  | { name: 'upsertAnswer', args?: MutationUpsertAnswerArgs[] | false, alias?: string  } 
  | { name: 'deleteAnswer', args?: MutationDeleteAnswerArgs[] | false, alias?: string  } 
  | { name: 'deleteManyAnswers', args?: MutationDeleteManyAnswersArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createPoll'
  | 'updatePoll'
  | 'updateManyPolls'
  | 'upsertPoll'
  | 'deletePoll'
  | 'deleteManyPolls'
  | 'createAnswer'
  | 'updateAnswer'
  | 'updateManyAnswers'
  | 'upsertAnswer'
  | 'deleteAnswer'
  | 'deleteManyAnswers'


type MutationCreatePollArgs =
  | 'data'
type MutationUpdatePollArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPollsArgs =
  | 'data'
  | 'where'
type MutationUpsertPollArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePollArgs =
  | 'where'
type MutationDeleteManyPollsArgs =
  | 'where'
type MutationCreateAnswerArgs =
  | 'data'
type MutationUpdateAnswerArgs =
  | 'data'
  | 'where'
type MutationUpdateManyAnswersArgs =
  | 'data'
  | 'where'
type MutationUpsertAnswerArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteAnswerArgs =
  | 'where'
type MutationDeleteManyAnswersArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createPoll: {
    type: 'Poll'
    args: Record<MutationCreatePollArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PollCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Poll> | prisma.Poll
  }
  updatePoll: {
    type: 'Poll'
    args: Record<MutationUpdatePollArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PollUpdateInput, where: PollWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Poll | null> | prisma.Poll | null
  }
  updateManyPolls: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPollsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PollUpdateManyMutationInput, where?: PollWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPoll: {
    type: 'Poll'
    args: Record<MutationUpsertPollArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PollWhereUniqueInput, create: PollCreateInput, update: PollUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Poll> | prisma.Poll
  }
  deletePoll: {
    type: 'Poll'
    args: Record<MutationDeletePollArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PollWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Poll | null> | prisma.Poll | null
  }
  deleteManyPolls: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPollsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PollWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createAnswer: {
    type: 'Answer'
    args: Record<MutationCreateAnswerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AnswerCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Answer> | prisma.Answer
  }
  updateAnswer: {
    type: 'Answer'
    args: Record<MutationUpdateAnswerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AnswerUpdateInput, where: AnswerWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Answer | null> | prisma.Answer | null
  }
  updateManyAnswers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyAnswersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: AnswerUpdateManyMutationInput, where?: AnswerWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertAnswer: {
    type: 'Answer'
    args: Record<MutationUpsertAnswerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: AnswerWhereUniqueInput, create: AnswerCreateInput, update: AnswerUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Answer> | prisma.Answer
  }
  deleteAnswer: {
    type: 'Answer'
    args: Record<MutationDeleteAnswerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: AnswerWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Answer | null> | prisma.Answer | null
  }
  deleteManyAnswers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyAnswersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: AnswerWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'poll', args?: SubscriptionPollArgs[] | false, alias?: string  } 
  | { name: 'answer', args?: SubscriptionAnswerArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'poll'
  | 'answer'


type SubscriptionPollArgs =
  | 'where'
type SubscriptionAnswerArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  poll: {
    type: 'PollSubscriptionPayload'
    args: Record<SubscriptionPollArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PollSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PollSubscriptionPayload | null> | prisma.PollSubscriptionPayload | null
  }
  answer: {
    type: 'AnswerSubscriptionPayload'
    args: Record<SubscriptionAnswerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: AnswerSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AnswerSubscriptionPayload | null> | prisma.AnswerSubscriptionPayload | null
  }
}
  

// Types for PollSubscriptionPayload

type PollSubscriptionPayloadObject =
  | PollSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PollSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PollSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PollSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Poll'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PollSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Poll | null> | prisma.Poll | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PollPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PollSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PollPreviousValues | null> | prisma.PollPreviousValues | null
  }
}
  

// Types for PollPreviousValues

type PollPreviousValuesObject =
  | PollPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'question', args?: [] | false, alias?: string  } 

type PollPreviousValuesFields =
  | 'id'
  | 'question'



  

export interface PollPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  question: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AnswerSubscriptionPayload

type AnswerSubscriptionPayloadObject =
  | AnswerSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type AnswerSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface AnswerSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"AnswerSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Answer'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AnswerSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Answer | null> | prisma.Answer | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'AnswerPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"AnswerSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AnswerPreviousValues | null> | prisma.AnswerPreviousValues | null
  }
}
  

// Types for AnswerPreviousValues

type AnswerPreviousValuesObject =
  | AnswerPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'answer', args?: [] | false, alias?: string  } 
  | { name: 'votes', args?: [] | false, alias?: string  } 

type AnswerPreviousValuesFields =
  | 'id'
  | 'answer'
  | 'votes'



  

export interface AnswerPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  answer: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  votes: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface PollWhereUniqueInput {
  id?: string | null
}
export type PollWhereUniqueInputInputObject =
  | Extract<keyof PollWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface AnswerWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  answer?: string | null
  answer_not?: string | null
  answer_in?: string[]
  answer_not_in?: string[]
  answer_lt?: string | null
  answer_lte?: string | null
  answer_gt?: string | null
  answer_gte?: string | null
  answer_contains?: string | null
  answer_not_contains?: string | null
  answer_starts_with?: string | null
  answer_not_starts_with?: string | null
  answer_ends_with?: string | null
  answer_not_ends_with?: string | null
  votes?: number | null
  votes_not?: number | null
  votes_in?: number[]
  votes_not_in?: number[]
  votes_lt?: number | null
  votes_lte?: number | null
  votes_gt?: number | null
  votes_gte?: number | null
  poll?: PollWhereInput | null
  AND?: AnswerWhereInput[]
  OR?: AnswerWhereInput[]
  NOT?: AnswerWhereInput[]
}
export type AnswerWhereInputInputObject =
  | Extract<keyof AnswerWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'answer', alias?: string  } 
  | { name: 'answer_not', alias?: string  } 
  | { name: 'answer_in', alias?: string  } 
  | { name: 'answer_not_in', alias?: string  } 
  | { name: 'answer_lt', alias?: string  } 
  | { name: 'answer_lte', alias?: string  } 
  | { name: 'answer_gt', alias?: string  } 
  | { name: 'answer_gte', alias?: string  } 
  | { name: 'answer_contains', alias?: string  } 
  | { name: 'answer_not_contains', alias?: string  } 
  | { name: 'answer_starts_with', alias?: string  } 
  | { name: 'answer_not_starts_with', alias?: string  } 
  | { name: 'answer_ends_with', alias?: string  } 
  | { name: 'answer_not_ends_with', alias?: string  } 
  | { name: 'votes', alias?: string  } 
  | { name: 'votes_not', alias?: string  } 
  | { name: 'votes_in', alias?: string  } 
  | { name: 'votes_not_in', alias?: string  } 
  | { name: 'votes_lt', alias?: string  } 
  | { name: 'votes_lte', alias?: string  } 
  | { name: 'votes_gt', alias?: string  } 
  | { name: 'votes_gte', alias?: string  } 
  | { name: 'poll', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PollWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  question?: string | null
  question_not?: string | null
  question_in?: string[]
  question_not_in?: string[]
  question_lt?: string | null
  question_lte?: string | null
  question_gt?: string | null
  question_gte?: string | null
  question_contains?: string | null
  question_not_contains?: string | null
  question_starts_with?: string | null
  question_not_starts_with?: string | null
  question_ends_with?: string | null
  question_not_ends_with?: string | null
  answers_every?: AnswerWhereInput | null
  answers_some?: AnswerWhereInput | null
  answers_none?: AnswerWhereInput | null
  AND?: PollWhereInput[]
  OR?: PollWhereInput[]
  NOT?: PollWhereInput[]
}
export type PollWhereInputInputObject =
  | Extract<keyof PollWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'question', alias?: string  } 
  | { name: 'question_not', alias?: string  } 
  | { name: 'question_in', alias?: string  } 
  | { name: 'question_not_in', alias?: string  } 
  | { name: 'question_lt', alias?: string  } 
  | { name: 'question_lte', alias?: string  } 
  | { name: 'question_gt', alias?: string  } 
  | { name: 'question_gte', alias?: string  } 
  | { name: 'question_contains', alias?: string  } 
  | { name: 'question_not_contains', alias?: string  } 
  | { name: 'question_starts_with', alias?: string  } 
  | { name: 'question_not_starts_with', alias?: string  } 
  | { name: 'question_ends_with', alias?: string  } 
  | { name: 'question_not_ends_with', alias?: string  } 
  | { name: 'answers_every', alias?: string  } 
  | { name: 'answers_some', alias?: string  } 
  | { name: 'answers_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AnswerWhereUniqueInput {
  id?: string | null
}
export type AnswerWhereUniqueInputInputObject =
  | Extract<keyof AnswerWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface PollCreateInput {
  id?: string | null
  question?: string
  answers?: AnswerCreateManyWithoutPollInput | null
}
export type PollCreateInputInputObject =
  | Extract<keyof PollCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'question', alias?: string  } 
  | { name: 'answers', alias?: string  } 
  
export interface AnswerCreateManyWithoutPollInput {
  create?: AnswerCreateWithoutPollInput[]
  connect?: AnswerWhereUniqueInput[]
}
export type AnswerCreateManyWithoutPollInputInputObject =
  | Extract<keyof AnswerCreateManyWithoutPollInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface AnswerCreateWithoutPollInput {
  id?: string | null
  answer?: string
  votes?: number | null
}
export type AnswerCreateWithoutPollInputInputObject =
  | Extract<keyof AnswerCreateWithoutPollInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'answer', alias?: string  } 
  | { name: 'votes', alias?: string  } 
  
export interface PollUpdateInput {
  question?: string | null
  answers?: AnswerUpdateManyWithoutPollInput | null
}
export type PollUpdateInputInputObject =
  | Extract<keyof PollUpdateInput, string>
  | { name: 'question', alias?: string  } 
  | { name: 'answers', alias?: string  } 
  
export interface AnswerUpdateManyWithoutPollInput {
  create?: AnswerCreateWithoutPollInput[]
  delete?: AnswerWhereUniqueInput[]
  connect?: AnswerWhereUniqueInput[]
  set?: AnswerWhereUniqueInput[]
  disconnect?: AnswerWhereUniqueInput[]
  update?: AnswerUpdateWithWhereUniqueWithoutPollInput[]
  upsert?: AnswerUpsertWithWhereUniqueWithoutPollInput[]
  deleteMany?: AnswerScalarWhereInput[]
  updateMany?: AnswerUpdateManyWithWhereNestedInput[]
}
export type AnswerUpdateManyWithoutPollInputInputObject =
  | Extract<keyof AnswerUpdateManyWithoutPollInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface AnswerUpdateWithWhereUniqueWithoutPollInput {
  where?: AnswerWhereUniqueInput
  data?: AnswerUpdateWithoutPollDataInput
}
export type AnswerUpdateWithWhereUniqueWithoutPollInputInputObject =
  | Extract<keyof AnswerUpdateWithWhereUniqueWithoutPollInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface AnswerUpdateWithoutPollDataInput {
  answer?: string | null
  votes?: number | null
}
export type AnswerUpdateWithoutPollDataInputInputObject =
  | Extract<keyof AnswerUpdateWithoutPollDataInput, string>
  | { name: 'answer', alias?: string  } 
  | { name: 'votes', alias?: string  } 
  
export interface AnswerUpsertWithWhereUniqueWithoutPollInput {
  where?: AnswerWhereUniqueInput
  update?: AnswerUpdateWithoutPollDataInput
  create?: AnswerCreateWithoutPollInput
}
export type AnswerUpsertWithWhereUniqueWithoutPollInputInputObject =
  | Extract<keyof AnswerUpsertWithWhereUniqueWithoutPollInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface AnswerScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  answer?: string | null
  answer_not?: string | null
  answer_in?: string[]
  answer_not_in?: string[]
  answer_lt?: string | null
  answer_lte?: string | null
  answer_gt?: string | null
  answer_gte?: string | null
  answer_contains?: string | null
  answer_not_contains?: string | null
  answer_starts_with?: string | null
  answer_not_starts_with?: string | null
  answer_ends_with?: string | null
  answer_not_ends_with?: string | null
  votes?: number | null
  votes_not?: number | null
  votes_in?: number[]
  votes_not_in?: number[]
  votes_lt?: number | null
  votes_lte?: number | null
  votes_gt?: number | null
  votes_gte?: number | null
  AND?: AnswerScalarWhereInput[]
  OR?: AnswerScalarWhereInput[]
  NOT?: AnswerScalarWhereInput[]
}
export type AnswerScalarWhereInputInputObject =
  | Extract<keyof AnswerScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'answer', alias?: string  } 
  | { name: 'answer_not', alias?: string  } 
  | { name: 'answer_in', alias?: string  } 
  | { name: 'answer_not_in', alias?: string  } 
  | { name: 'answer_lt', alias?: string  } 
  | { name: 'answer_lte', alias?: string  } 
  | { name: 'answer_gt', alias?: string  } 
  | { name: 'answer_gte', alias?: string  } 
  | { name: 'answer_contains', alias?: string  } 
  | { name: 'answer_not_contains', alias?: string  } 
  | { name: 'answer_starts_with', alias?: string  } 
  | { name: 'answer_not_starts_with', alias?: string  } 
  | { name: 'answer_ends_with', alias?: string  } 
  | { name: 'answer_not_ends_with', alias?: string  } 
  | { name: 'votes', alias?: string  } 
  | { name: 'votes_not', alias?: string  } 
  | { name: 'votes_in', alias?: string  } 
  | { name: 'votes_not_in', alias?: string  } 
  | { name: 'votes_lt', alias?: string  } 
  | { name: 'votes_lte', alias?: string  } 
  | { name: 'votes_gt', alias?: string  } 
  | { name: 'votes_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AnswerUpdateManyWithWhereNestedInput {
  where?: AnswerScalarWhereInput
  data?: AnswerUpdateManyDataInput
}
export type AnswerUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof AnswerUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface AnswerUpdateManyDataInput {
  answer?: string | null
  votes?: number | null
}
export type AnswerUpdateManyDataInputInputObject =
  | Extract<keyof AnswerUpdateManyDataInput, string>
  | { name: 'answer', alias?: string  } 
  | { name: 'votes', alias?: string  } 
  
export interface PollUpdateManyMutationInput {
  question?: string | null
}
export type PollUpdateManyMutationInputInputObject =
  | Extract<keyof PollUpdateManyMutationInput, string>
  | { name: 'question', alias?: string  } 
  
export interface AnswerCreateInput {
  id?: string | null
  answer?: string
  votes?: number | null
  poll?: PollCreateOneWithoutAnswersInput
}
export type AnswerCreateInputInputObject =
  | Extract<keyof AnswerCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'answer', alias?: string  } 
  | { name: 'votes', alias?: string  } 
  | { name: 'poll', alias?: string  } 
  
export interface PollCreateOneWithoutAnswersInput {
  create?: PollCreateWithoutAnswersInput | null
  connect?: PollWhereUniqueInput | null
}
export type PollCreateOneWithoutAnswersInputInputObject =
  | Extract<keyof PollCreateOneWithoutAnswersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PollCreateWithoutAnswersInput {
  id?: string | null
  question?: string
}
export type PollCreateWithoutAnswersInputInputObject =
  | Extract<keyof PollCreateWithoutAnswersInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'question', alias?: string  } 
  
export interface AnswerUpdateInput {
  answer?: string | null
  votes?: number | null
  poll?: PollUpdateOneRequiredWithoutAnswersInput | null
}
export type AnswerUpdateInputInputObject =
  | Extract<keyof AnswerUpdateInput, string>
  | { name: 'answer', alias?: string  } 
  | { name: 'votes', alias?: string  } 
  | { name: 'poll', alias?: string  } 
  
export interface PollUpdateOneRequiredWithoutAnswersInput {
  create?: PollCreateWithoutAnswersInput | null
  update?: PollUpdateWithoutAnswersDataInput | null
  upsert?: PollUpsertWithoutAnswersInput | null
  connect?: PollWhereUniqueInput | null
}
export type PollUpdateOneRequiredWithoutAnswersInputInputObject =
  | Extract<keyof PollUpdateOneRequiredWithoutAnswersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PollUpdateWithoutAnswersDataInput {
  question?: string | null
}
export type PollUpdateWithoutAnswersDataInputInputObject =
  | Extract<keyof PollUpdateWithoutAnswersDataInput, string>
  | { name: 'question', alias?: string  } 
  
export interface PollUpsertWithoutAnswersInput {
  update?: PollUpdateWithoutAnswersDataInput
  create?: PollCreateWithoutAnswersInput
}
export type PollUpsertWithoutAnswersInputInputObject =
  | Extract<keyof PollUpsertWithoutAnswersInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface AnswerUpdateManyMutationInput {
  answer?: string | null
  votes?: number | null
}
export type AnswerUpdateManyMutationInputInputObject =
  | Extract<keyof AnswerUpdateManyMutationInput, string>
  | { name: 'answer', alias?: string  } 
  | { name: 'votes', alias?: string  } 
  
export interface PollSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PollWhereInput | null
  AND?: PollSubscriptionWhereInput[]
  OR?: PollSubscriptionWhereInput[]
  NOT?: PollSubscriptionWhereInput[]
}
export type PollSubscriptionWhereInputInputObject =
  | Extract<keyof PollSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface AnswerSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: AnswerWhereInput | null
  AND?: AnswerSubscriptionWhereInput[]
  OR?: AnswerSubscriptionWhereInput[]
  NOT?: AnswerSubscriptionWhereInput[]
}
export type AnswerSubscriptionWhereInputInputObject =
  | Extract<keyof AnswerSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type AnswerOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'answer_ASC'
  | 'answer_DESC'
  | 'votes_ASC'
  | 'votes_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type PollOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'question_ASC'
  | 'question_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  