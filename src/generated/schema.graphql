### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type Answer {
  answer: String!
  id: ID!
  poll: Poll!
  votes: Int!
}

enum AnswerOrderByInput {
  answer_ASC
  answer_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  votes_ASC
  votes_DESC
}

input AnswerWhereInput {
  AND: [AnswerWhereInput!]
  answer: String
  answer_contains: String
  answer_ends_with: String
  answer_gt: String
  answer_gte: String
  answer_in: [String!]
  answer_lt: String
  answer_lte: String
  answer_not: String
  answer_not_contains: String
  answer_not_ends_with: String
  answer_not_in: [String!]
  answer_not_starts_with: String
  answer_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [AnswerWhereInput!]
  OR: [AnswerWhereInput!]
  poll: PollWhereInput
  votes: Int
  votes_gt: Int
  votes_gte: Int
  votes_in: [Int!]
  votes_lt: Int
  votes_lte: Int
  votes_not: Int
  votes_not_in: [Int!]
}

type Mutation {
  createPoll(answers: [String!]!, question: String!): Poll!
  vote(answerId: ID!): Answer!
}

type Poll {
  answers(after: String, before: String, first: Int, last: Int, orderBy: AnswerOrderByInput, skip: Int, where: AnswerWhereInput): [Answer!]
  id: ID!
  question: String!
}

input PollWhereInput {
  AND: [PollWhereInput!]
  answers_every: AnswerWhereInput
  answers_none: AnswerWhereInput
  answers_some: AnswerWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [PollWhereInput!]
  OR: [PollWhereInput!]
  question: String
  question_contains: String
  question_ends_with: String
  question_gt: String
  question_gte: String
  question_in: [String!]
  question_lt: String
  question_lte: String
  question_not: String
  question_not_contains: String
  question_not_ends_with: String
  question_not_in: [String!]
  question_not_starts_with: String
  question_starts_with: String
}

input PollWhereUniqueInput {
  id: ID
}

type Query {
  poll(where: PollWhereUniqueInput!): Poll
}
